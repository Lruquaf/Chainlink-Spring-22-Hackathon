{
  "address": "0xBC2D2E79bF3F2a032a1A55fed21c62bf178937b6",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "descirption",
          "type": "bytes32"
        }
      ],
      "name": "UpkeepPerformed",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "contract IGovernance",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        }
      ],
      "name": "setGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xabd983b4c14a7137542cf3eee50cea6293f2757693e9bfb6a986d7ca22cf7d63",
  "receipt": {
    "to": null,
    "from": "0xC85C392654B161E9a16f8f8766Db5E75620dD276",
    "contractAddress": "0xBC2D2E79bF3F2a032a1A55fed21c62bf178937b6",
    "transactionIndex": 10,
    "gasUsed": "1191055",
    "logsBloom": "0x
    "blockHash": "0x0639727135cd373c5fdf584b05518e92c4e9aa616bb68be3e3ed51a1161b61c7",
    "transactionHash": "0xabd983b4c14a7137542cf3eee50cea6293f2757693e9bfb6a986d7ca22cf7d63",
    "logs": [
      {
        "transactionIndex": 10,
        "blockNumber": 36605630,
        "transactionHash": "0xabd983b4c14a7137542cf3eee50cea6293f2757693e9bfb6a986d7ca22cf7d63",
        "address": "0xBC2D2E79bF3F2a032a1A55fed21c62bf178937b6",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c85c392654b161e9a16f8f8766db5e75620dd276"
        ],
        "data": "0x",
        "logIndex": 173,
        "blockHash": "0x0639727135cd373c5fdf584b05518e92c4e9aa616bb68be3e3ed51a1161b61c7"
      },
      {
        "transactionIndex": 10,
        "blockNumber": 36605630,
        "transactionHash": "0xabd983b4c14a7137542cf3eee50cea6293f2757693e9bfb6a986d7ca22cf7d63",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000c85c392654b161e9a16f8f8766db5e75620dd276",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000658e3274641000000000000000000000000000000000000000000000000001620a9d0e4576e37000000000000000000000000000000000000000000000a987e3681455636a4ed000000000000000000000000000000000000000000000000161a50edbd112d37000000000000000000000000000000000000000000000a987e3cda287d7ce5ed",
        "logIndex": 174,
        "blockHash": "0x0639727135cd373c5fdf584b05518e92c4e9aa616bb68be3e3ed51a1161b61c7"
      }
    ],
    "blockNumber": 36605630,
    "cumulativeGasUsed": "6505478",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 2,
  "solcInputHash": "88c80ea59fca8fe295b5eb92460d0042",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"descirption\",\"type\":\"bytes32\"}],\"name\":\"UpkeepPerformed\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"contract IGovernance\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"overrides interface AutomationCompatibleInterface.sol\",\"params\":{\"\":\"\\\"checkData\\\" is not used\"},\"returns\":{\"_1\":\"performData is not used\",\"upkeepNeeded\":\"is whether upkeep conditions are fulfilled or not\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"performUpkeep(bytes)\":{\"details\":\"overrides interface AutomationCompatibleInterface.sol\",\"params\":{\"\":\"\\\"performdata\\\" is not used\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"setGovernance(address)\":{\"params\":{\"_governance\":\"sets governance contract.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"checkUpkeep(bytes)\":{\"notice\":\"checks whether the conditions for a proposal to execution are fulfilled or not\"},\"performUpkeep(bytes)\":{\"notice\":\"performs the execution of current proposal\"},\"setGovernance(address)\":{\"notice\":\"This function can be accessible by owner of this contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Automation.sol\":\"Automation\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":99999},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Automation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\n/**\\r\\n * @title Automation contract for of execution process for the DAO\\r\\n * @author Lruquaf ---> github.com/Lruquaf\\r\\n * @notice this Chainlink Automation compatible contract executes\\r\\n * a passed and ready proposal in Governance.sol automatically\\r\\n */\\r\\n\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./IGovernance.sol\\\";\\r\\n\\r\\ncontract Automation is AutomationCompatibleInterface, Ownable {\\r\\n    IGovernance public governance; // address of governance contract\\r\\n\\r\\n    event UpkeepPerformed(uint256 proposalId, bytes32 descirption);\\r\\n\\r\\n    /**\\r\\n     *\\r\\n     * @param _governance sets governance contract.\\r\\n     * @notice This function can be accessible by owner of this contract\\r\\n     */\\r\\n\\r\\n    function setGovernance(address _governance) public onlyOwner {\\r\\n        require(\\r\\n            address(governance) == address(0),\\r\\n            \\\"Governance contract has already set!\\\"\\r\\n        );\\r\\n        governance = IGovernance(_governance);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *\\r\\n     * @param \\\"checkData\\\" is not used\\r\\n     * @return upkeepNeeded is whether upkeep conditions are fulfilled or not\\r\\n     * @return performData is not used\\r\\n     * @notice checks whether the conditions for a proposal to execution are fulfilled or not\\r\\n     * @dev overrides interface AutomationCompatibleInterface.sol\\r\\n     */\\r\\n\\r\\n    function checkUpkeep(\\r\\n        bytes calldata /* checkData */\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (bool upkeepNeeded, bytes memory /* performData */)\\r\\n    {\\r\\n        uint256 proposalId = governance.getProposalId();\\r\\n        uint256 executionTime = governance.getExecutionTime();\\r\\n        upkeepNeeded =\\r\\n            (proposalId != 0) &&\\r\\n            (governance.isReadyToExecution()) &&\\r\\n            (executionTime <= block.timestamp);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     *\\r\\n     * @param \\\"performdata\\\" is not used\\r\\n     * @dev overrides interface AutomationCompatibleInterface.sol\\r\\n     * @notice performs the execution of current proposal\\r\\n     */\\r\\n\\r\\n    function performUpkeep(bytes calldata /* performData */) external override {\\r\\n        uint256 proposalId = governance.getProposalId();\\r\\n        uint256 executionTime = governance.getExecutionTime();\\r\\n        require(\\r\\n            (proposalId != 0) &&\\r\\n                (executionTime <= block.timestamp) &&\\r\\n                (governance.isReadyToExecution()),\\r\\n            \\\"Execution is not ready yet!\\\"\\r\\n        );\\r\\n        governance.execute(\\r\\n            governance.getTargets(),\\r\\n            governance.getValues(),\\r\\n            governance.getCalldatas(),\\r\\n            governance.getDescription()\\r\\n        );\\r\\n        emit UpkeepPerformed(proposalId, governance.getDescription());\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x8fa3e9f5a816e8ccfb698e623df409d607536931e21c3d587398fed9cdd5425d\",\"license\":\"MIT\"},\"contracts/IGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\ninterface IGovernance {\\r\\n    struct CurrentProposal {\\r\\n        uint256 proposalId;\\r\\n        uint256 executionTime;\\r\\n        address[] targets;\\r\\n        uint256[] values;\\r\\n        bytes[] calldatas;\\r\\n        bytes32 description;\\r\\n        string descriptionString;\\r\\n    }\\r\\n\\r\\n    function execute(\\r\\n        address[] memory targets,\\r\\n        uint256[] memory values,\\r\\n        bytes[] memory calldatas,\\r\\n        bytes32 descriptionHash\\r\\n    ) external payable returns (uint256);\\r\\n\\r\\n    function getProposalId() external view returns (uint256);\\r\\n\\r\\n    function getExecutionTime() external view returns (uint256);\\r\\n\\r\\n    function getTargets() external view returns (address[] memory);\\r\\n\\r\\n    function getValues() external view returns (uint256[] memory);\\r\\n\\r\\n    function getCalldatas() external view returns (bytes[] memory);\\r\\n\\r\\n    function getDescription() external view returns (bytes32);\\r\\n\\r\\n    function getDescriptionString() external view returns (string memory);\\r\\n\\r\\n    function isReadyToExecution() external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0xdf696cfddefae9c841db8f86ab4e70aecd4e27eb5192ed1e2b1a3128ffe8be89\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6114328061007e6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063715018a61161005b578063715018a6146100ee5780638da5cb5b146100f6578063ab033ea91461011c578063f2fde38b1461012f57600080fd5b80634585e33b146100825780635aa6e675146100975780636e04ff0d146100cd575b600080fd5b610095610090366004610b46565b610142565b005b6001546100b79073ffffffffffffffffffffffffffffffffffffffff1681565b6040516100c49190610bd3565b60405180910390f35b6100e06100db366004610b46565b61073a565b6040516100c4929190610c5d565b61009561091a565b60005473ffffffffffffffffffffffffffffffffffffffff166040516100c49190610cac565b61009561012a366004610cd9565b61092e565b61009561013d366004610cd9565b6109cd565b600154604080517f532c27b8000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163532c27b89160048083019260209291908290030181865afa1580156101b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d69190610d0b565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe95ad486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610247573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026b9190610d0b565b9050811580159061027c5750428111155b80156103145750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631ad85cb56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103149190610d3f565b610353576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034a90610d97565b60405180910390fd5b600154604080517f63fe3b56000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff90921691632656227d9183916363fe3b56916004808201926000929091908290030181865afa1580156103cb573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526104119190810190610ef0565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166319eb4a906040518163ffffffff1660e01b8152600401600060405180830381865afa15801561047e573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526104c49190810190610fa0565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b36ea8646040518163ffffffff1660e01b8152600401600060405180830381865afa158015610531573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526105779190810190611116565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631a0925416040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106089190610d0b565b6040518563ffffffff1660e01b81526004016106279493929190611277565b6020604051808303816000875af1158015610646573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066a9190610d0b565b507fc157ff9ea5845fa873c02130a68f9e384d14cf201679011cd4bb3b18cbdc5e5182600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631a0925416040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071e9190610d0b565b60405161072c9291906112c8565b60405180910390a150505050565b600060606000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663532c27b86040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d19190610d0b565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe95ad486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610842573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108669190610d0b565b905081158015906109035750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631ad85cb56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109039190610d3f565b801561090f5750428111155b935050509250929050565b610922610a2e565b61092c6000610a7f565b565b610936610a2e565b60015473ffffffffffffffffffffffffffffffffffffffff1615610986576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034a90611340565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6109d5610a2e565b73ffffffffffffffffffffffffffffffffffffffff8116610a22576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034a906113aa565b610a2b81610a7f565b50565b60005473ffffffffffffffffffffffffffffffffffffffff16331461092c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034a906113ec565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008083601f840112610b0957610b09600080fd5b50813567ffffffffffffffff811115610b2457610b24600080fd5b602083019150836001820283011115610b3f57610b3f600080fd5b9250929050565b60008060208385031215610b5c57610b5c600080fd5b823567ffffffffffffffff811115610b7657610b76600080fd5b610b8285828601610af4565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82165b92915050565b6000610ba882610b8e565b6000610ba882610bae565b610bcd81610bb9565b82525050565b60208101610ba88284610bc4565b801515610bcd565b60005b83811015610c04578181015183820152602001610bec565b50506000910152565b6000610c17825190565b808452602084019350610c2e818560208601610be9565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920192915050565b60408101610c6b8285610be1565b8181036020830152610c7d8184610c0d565b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff8216610ba8565b610bcd81610c85565b60208101610ba88284610ca3565b610cc381610c85565b8114610a2b57600080fd5b8035610ba881610cba565b600060208284031215610cee57610cee600080fd5b6000610c7d8484610cce565b80610cc3565b8051610ba881610cfa565b600060208284031215610d2057610d20600080fd5b6000610c7d8484610d00565b801515610cc3565b8051610ba881610d2c565b600060208284031215610d5457610d54600080fd5b6000610c7d8484610d34565b601b81526000602082017f457865637574696f6e206973206e6f7420726561647920796574210000000000815291505b5060200190565b60208082528101610ba881610d60565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f830116810181811067ffffffffffffffff82111715610e1a57610e1a610da7565b6040525050565b6000610e2c60405190565b9050610e388282610dd6565b919050565b600067ffffffffffffffff821115610e5757610e57610da7565b5060209081020190565b8051610ba881610cba565b6000610e7f610e7a84610e3d565b610e21565b83815290506020808201908402830185811115610e9e57610e9e600080fd5b835b81811015610ec25780610eb38882610e61565b84525060209283019201610ea0565b5050509392505050565b600082601f830112610ee057610ee0600080fd5b8151610c7d848260208601610e6c565b600060208284031215610f0557610f05600080fd5b815167ffffffffffffffff811115610f1f57610f1f600080fd5b610c7d84828501610ecc565b6000610f39610e7a84610e3d565b83815290506020808201908402830185811115610f5857610f58600080fd5b835b81811015610ec25780610f6d8882610d00565b84525060209283019201610f5a565b600082601f830112610f9057610f90600080fd5b8151610c7d848260208601610f2b565b600060208284031215610fb557610fb5600080fd5b815167ffffffffffffffff811115610fcf57610fcf600080fd5b610c7d84828501610f7c565b600067ffffffffffffffff821115610ff557610ff5610da7565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011660200192915050565b6000611032610e7a84610fdb565b90508281526020810184848401111561104d5761104d600080fd5b611058848285610be9565b509392505050565b600082601f83011261107457611074600080fd5b8151610c7d848260208601611024565b6000611092610e7a84610e3d565b838152905060208082019084028301858111156110b1576110b1600080fd5b835b81811015610ec257805167ffffffffffffffff8111156110d5576110d5600080fd5b8086016110e28982611060565b85525050602092830192016110b3565b600082601f83011261110657611106600080fd5b8151610c7d848260208601611084565b60006020828403121561112b5761112b600080fd5b815167ffffffffffffffff81111561114557611145600080fd5b610c7d848285016110f2565b600061115d8383610ca3565b505060200190565b600061116f825190565b80845260209384019383018060005b838110156111a35781516111928882611151565b97506020830192505060010161117e565b509495945050505050565b80610bcd565b600061115d83836111ae565b60006111ca825190565b80845260209384019383018060005b838110156111a35781516111ed88826111b4565b9750602083019250506001016111d9565b600061120a8383610c0d565b9392505050565b600061121b825190565b808452602084019350836020820285016112358560200190565b8060005b8581101561126a578484038952815161125285826111fe565b94506020830160209a909a0199925050600101611239565b5091979650505050505050565b608080825281016112888187611165565b9050818103602083015261129c81866111c0565b905081810360408301526112b08185611211565b90506112bf60608301846111ae565b95945050505050565b604081016112d682856111ae565b61120a60208301846111ae565b602481526000602082017f476f7665726e616e636520636f6e74726163742068617320616c72656164792081527f7365742100000000000000000000000000000000000000000000000000000000602082015291505b5060400190565b60208082528101610ba8816112e3565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f646472657373000000000000000000000000000000000000000000000000000060208201529150611339565b60208082528101610ba881611350565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657291019081526000610d90565b60208082528101610ba8816113ba56fea2646970667358221220e4f3af4c5f506f2eb1dcc1ceefbe494eada89fb61b976085aea41151f17fcd0964736f6c63430008120033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063715018a61161005b578063715018a6146100ee5780638da5cb5b146100f6578063ab033ea91461011c578063f2fde38b1461012f57600080fd5b80634585e33b146100825780635aa6e675146100975780636e04ff0d146100cd575b600080fd5b610095610090366004610b46565b610142565b005b6001546100b79073ffffffffffffffffffffffffffffffffffffffff1681565b6040516100c49190610bd3565b60405180910390f35b6100e06100db366004610b46565b61073a565b6040516100c4929190610c5d565b61009561091a565b60005473ffffffffffffffffffffffffffffffffffffffff166040516100c49190610cac565b61009561012a366004610cd9565b61092e565b61009561013d366004610cd9565b6109cd565b600154604080517f532c27b8000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163532c27b89160048083019260209291908290030181865afa1580156101b2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101d69190610d0b565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe95ad486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610247573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026b9190610d0b565b9050811580159061027c5750428111155b80156103145750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631ad85cb56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156102f0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103149190610d3f565b610353576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034a90610d97565b60405180910390fd5b600154604080517f63fe3b56000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff90921691632656227d9183916363fe3b56916004808201926000929091908290030181865afa1580156103cb573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526104119190810190610ef0565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166319eb4a906040518163ffffffff1660e01b8152600401600060405180830381865afa15801561047e573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526104c49190810190610fa0565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b36ea8646040518163ffffffff1660e01b8152600401600060405180830381865afa158015610531573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526105779190810190611116565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631a0925416040518163ffffffff1660e01b8152600401602060405180830381865afa1580156105e4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106089190610d0b565b6040518563ffffffff1660e01b81526004016106279493929190611277565b6020604051808303816000875af1158015610646573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061066a9190610d0b565b507fc157ff9ea5845fa873c02130a68f9e384d14cf201679011cd4bb3b18cbdc5e5182600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631a0925416040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106fa573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061071e9190610d0b565b60405161072c9291906112c8565b60405180910390a150505050565b600060606000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663532c27b86040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d19190610d0b565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe95ad486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610842573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108669190610d0b565b905081158015906109035750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631ad85cb56040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108df573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109039190610d3f565b801561090f5750428111155b935050509250929050565b610922610a2e565b61092c6000610a7f565b565b610936610a2e565b60015473ffffffffffffffffffffffffffffffffffffffff1615610986576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034a90611340565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b6109d5610a2e565b73ffffffffffffffffffffffffffffffffffffffff8116610a22576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034a906113aa565b610a2b81610a7f565b50565b60005473ffffffffffffffffffffffffffffffffffffffff16331461092c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161034a906113ec565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008083601f840112610b0957610b09600080fd5b50813567ffffffffffffffff811115610b2457610b24600080fd5b602083019150836001820283011115610b3f57610b3f600080fd5b9250929050565b60008060208385031215610b5c57610b5c600080fd5b823567ffffffffffffffff811115610b7657610b76600080fd5b610b8285828601610af4565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82165b92915050565b6000610ba882610b8e565b6000610ba882610bae565b610bcd81610bb9565b82525050565b60208101610ba88284610bc4565b801515610bcd565b60005b83811015610c04578181015183820152602001610bec565b50506000910152565b6000610c17825190565b808452602084019350610c2e818560208601610be9565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920192915050565b60408101610c6b8285610be1565b8181036020830152610c7d8184610c0d565b949350505050565b600073ffffffffffffffffffffffffffffffffffffffff8216610ba8565b610bcd81610c85565b60208101610ba88284610ca3565b610cc381610c85565b8114610a2b57600080fd5b8035610ba881610cba565b600060208284031215610cee57610cee600080fd5b6000610c7d8484610cce565b80610cc3565b8051610ba881610cfa565b600060208284031215610d2057610d20600080fd5b6000610c7d8484610d00565b801515610cc3565b8051610ba881610d2c565b600060208284031215610d5457610d54600080fd5b6000610c7d8484610d34565b601b81526000602082017f457865637574696f6e206973206e6f7420726561647920796574210000000000815291505b5060200190565b60208082528101610ba881610d60565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f830116810181811067ffffffffffffffff82111715610e1a57610e1a610da7565b6040525050565b6000610e2c60405190565b9050610e388282610dd6565b919050565b600067ffffffffffffffff821115610e5757610e57610da7565b5060209081020190565b8051610ba881610cba565b6000610e7f610e7a84610e3d565b610e21565b83815290506020808201908402830185811115610e9e57610e9e600080fd5b835b81811015610ec25780610eb38882610e61565b84525060209283019201610ea0565b5050509392505050565b600082601f830112610ee057610ee0600080fd5b8151610c7d848260208601610e6c565b600060208284031215610f0557610f05600080fd5b815167ffffffffffffffff811115610f1f57610f1f600080fd5b610c7d84828501610ecc565b6000610f39610e7a84610e3d565b83815290506020808201908402830185811115610f5857610f58600080fd5b835b81811015610ec25780610f6d8882610d00565b84525060209283019201610f5a565b600082601f830112610f9057610f90600080fd5b8151610c7d848260208601610f2b565b600060208284031215610fb557610fb5600080fd5b815167ffffffffffffffff811115610fcf57610fcf600080fd5b610c7d84828501610f7c565b600067ffffffffffffffff821115610ff557610ff5610da7565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011660200192915050565b6000611032610e7a84610fdb565b90508281526020810184848401111561104d5761104d600080fd5b611058848285610be9565b509392505050565b600082601f83011261107457611074600080fd5b8151610c7d848260208601611024565b6000611092610e7a84610e3d565b838152905060208082019084028301858111156110b1576110b1600080fd5b835b81811015610ec257805167ffffffffffffffff8111156110d5576110d5600080fd5b8086016110e28982611060565b85525050602092830192016110b3565b600082601f83011261110657611106600080fd5b8151610c7d848260208601611084565b60006020828403121561112b5761112b600080fd5b815167ffffffffffffffff81111561114557611145600080fd5b610c7d848285016110f2565b600061115d8383610ca3565b505060200190565b600061116f825190565b80845260209384019383018060005b838110156111a35781516111928882611151565b97506020830192505060010161117e565b509495945050505050565b80610bcd565b600061115d83836111ae565b60006111ca825190565b80845260209384019383018060005b838110156111a35781516111ed88826111b4565b9750602083019250506001016111d9565b600061120a8383610c0d565b9392505050565b600061121b825190565b808452602084019350836020820285016112358560200190565b8060005b8581101561126a578484038952815161125285826111fe565b94506020830160209a909a0199925050600101611239565b5091979650505050505050565b608080825281016112888187611165565b9050818103602083015261129c81866111c0565b905081810360408301526112b08185611211565b90506112bf60608301846111ae565b95945050505050565b604081016112d682856111ae565b61120a60208301846111ae565b602481526000602082017f476f7665726e616e636520636f6e74726163742068617320616c72656164792081527f7365742100000000000000000000000000000000000000000000000000000000602082015291505b5060400190565b60208082528101610ba8816112e3565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f646472657373000000000000000000000000000000000000000000000000000060208201529150611339565b60208082528101610ba881611350565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657291019081526000610d90565b60208082528101610ba8816113ba56fea2646970667358221220e4f3af4c5f506f2eb1dcc1ceefbe494eada89fb61b976085aea41151f17fcd0964736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "overrides interface AutomationCompatibleInterface.sol",
        "params": {
          "": "\"checkData\" is not used"
        },
        "returns": {
          "_1": "performData is not used",
          "upkeepNeeded": "is whether upkeep conditions are fulfilled or not"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "performUpkeep(bytes)": {
        "details": "overrides interface AutomationCompatibleInterface.sol",
        "params": {
          "": "\"performdata\" is not used"
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "setGovernance(address)": {
        "params": {
          "_governance": "sets governance contract."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "checkUpkeep(bytes)": {
        "notice": "checks whether the conditions for a proposal to execution are fulfilled or not"
      },
      "performUpkeep(bytes)": {
        "notice": "performs the execution of current proposal"
      },
      "setGovernance(address)": {
        "notice": "This function can be accessible by owner of this contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 26,
        "contract": "contracts/Automation.sol:Automation",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7766,
        "contract": "contracts/Automation.sol:Automation",
        "label": "governance",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IGovernance)8405"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(IGovernance)8405": {
        "encoding": "inplace",
        "label": "contract IGovernance",
        "numberOfBytes": "20"
      }
    }
  }
}