{
  "address": "0xbb1bDC005d77E0aCFb5E7a83C246DD9F86A971F8",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentProposal",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "executionTime",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "description",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governance",
      "outputs": [
        {
          "internalType": "contract IGovernance",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_governance",
          "type": "address"
        }
      ],
      "name": "setGovernance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2d2fedb513ae79cd2a799909fb1f25372ed916082e34f81781a772edf010dc96",
  "receipt": {
    "to": null,
    "from": "0xC85C392654B161E9a16f8f8766Db5E75620dD276",
    "contractAddress": "0xbb1bDC005d77E0aCFb5E7a83C246DD9F86A971F8",
    "transactionIndex": 14,
    "gasUsed": "1159448",
    "logsBloom": "0x
    "blockHash": "0x105cad6f27f005cd3c4515f49e72a09b2743a24f34ebe91904be7da691e928e8",
    "transactionHash": "0x2d2fedb513ae79cd2a799909fb1f25372ed916082e34f81781a772edf010dc96",
    "logs": [
      {
        "transactionIndex": 14,
        "blockNumber": 3529169,
        "transactionHash": "0x2d2fedb513ae79cd2a799909fb1f25372ed916082e34f81781a772edf010dc96",
        "address": "0xbb1bDC005d77E0aCFb5E7a83C246DD9F86A971F8",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000c85c392654b161e9a16f8f8766db5e75620dd276"
        ],
        "data": "0x",
        "logIndex": 17,
        "blockHash": "0x105cad6f27f005cd3c4515f49e72a09b2743a24f34ebe91904be7da691e928e8"
      }
    ],
    "blockNumber": 3529169,
    "cumulativeGasUsed": "2127043",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "b7a0d19b6b903f5d5d8a3eef0f405cb2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.18+commit.87f61d96\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentProposal\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"executionTime\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"description\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governance\",\"outputs\":[{\"internalType\":\"contract IGovernance\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_governance\",\"type\":\"address\"}],\"name\":\"setGovernance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Automation.sol\":\"Automation\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"details\":{\"constantOptimizer\":true,\"cse\":true,\"deduplicate\":true,\"inliner\":true,\"jumpdestRemover\":true,\"orderLiterals\":true,\"peephole\":true,\"yul\":false},\"runs\":99999},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AutomationCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0x67076747c6f66d8d43472a56e72879c350056bff82e069addaf9064922863340\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Automation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AutomationCompatibleInterface.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"./IGovernance.sol\\\";\\r\\n\\r\\ncontract Automation is AutomationCompatibleInterface, Ownable {\\r\\n    IGovernance public governance;\\r\\n\\r\\n    IGovernance.CurrentProposal public currentProposal;\\r\\n\\r\\n    function setGovernance(address _governance) public onlyOwner {\\r\\n        require(\\r\\n            address(governance) == address(0),\\r\\n            \\\"Governance contract has already set!\\\"\\r\\n        );\\r\\n        governance = IGovernance(_governance);\\r\\n    }\\r\\n\\r\\n    function checkUpkeep(\\r\\n        bytes calldata /* checkData */\\r\\n    )\\r\\n        external\\r\\n        view\\r\\n        override\\r\\n        returns (bool upkeepNeeded, bytes memory /* performData */)\\r\\n    {\\r\\n        uint256 proposalId = governance.getProposalId();\\r\\n        uint256 executionTime = governance.getExecutionTime();\\r\\n        upkeepNeeded =\\r\\n            (proposalId != 0) &&\\r\\n            (governance.isReadyToExecution()) &&\\r\\n            (executionTime <= block.timestamp);\\r\\n    }\\r\\n\\r\\n    function performUpkeep(bytes calldata /* performData */) external override {\\r\\n        uint256 proposalId = governance.getProposalId();\\r\\n        uint256 executionTime = governance.getExecutionTime();\\r\\n        require(\\r\\n            (proposalId != 0) &&\\r\\n                (executionTime <= block.timestamp) &&\\r\\n                (governance.isReadyToExecution()),\\r\\n            \\\"Execution is not ready yet!\\\"\\r\\n        );\\r\\n        governance.execute(\\r\\n            governance.getTargets(),\\r\\n            governance.getValues(),\\r\\n            governance.getCalldatas(),\\r\\n            governance.getDescription()\\r\\n        );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x40a7b98406ac09d2ab464ea827fac43499f0b05d167c95becfe2237dfef13e9d\",\"license\":\"MIT\"},\"contracts/IGovernance.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.8;\\r\\n\\r\\ninterface IGovernance {\\r\\n    struct CurrentProposal {\\r\\n        uint256 proposalId;\\r\\n        uint256 executionTime;\\r\\n        address[] targets;\\r\\n        uint256[] values;\\r\\n        bytes[] calldatas;\\r\\n        bytes32 description;\\r\\n    }\\r\\n\\r\\n    function execute(\\r\\n        address[] memory targets,\\r\\n        uint256[] memory values,\\r\\n        bytes[] memory calldatas,\\r\\n        bytes32 descriptionHash\\r\\n    ) external payable returns (uint256);\\r\\n\\r\\n    function getProposalId() external view returns (uint256);\\r\\n\\r\\n    function getExecutionTime() external view returns (uint256);\\r\\n\\r\\n    function getTargets() external view returns (address[] memory);\\r\\n\\r\\n    function getValues() external view returns (uint256[] memory);\\r\\n\\r\\n    function getCalldatas() external view returns (bytes[] memory);\\r\\n\\r\\n    function getDescription() external view returns (bytes32);\\r\\n\\r\\n    function isReadyToExecution() external view returns (bool);\\r\\n}\\r\\n\",\"keccak256\":\"0x926c633667b08d25db02c1f1f3a2a3958cc89351adc44137a852d85e211ac90b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063715018a61161005b578063715018a61461011a5780638da5cb5b14610122578063ab033ea914610148578063f2fde38b1461015b57600080fd5b80632b49d4251461008d5780634585e33b146100b75780635aa6e675146100cc5780636e04ff0d146100f9575b600080fd5b60025460035460075461009f92919083565b6040516100ae93929190610a5f565b60405180910390f35b6100ca6100c5366004610ae1565b61016e565b005b6001546100ec9073ffffffffffffffffffffffffffffffffffffffff1681565b6040516100ae9190610b68565b61010c610107366004610ae1565b61069d565b6040516100ae929190610bf2565b6100ca61087d565b60005473ffffffffffffffffffffffffffffffffffffffff166040516100ae9190610c39565b6100ca610156366004610c66565b610891565b6100ca610169366004610c66565b610930565b600154604080517f532c27b8000000000000000000000000000000000000000000000000000000008152905160009273ffffffffffffffffffffffffffffffffffffffff169163532c27b89160048083019260209291908290030181865afa1580156101de573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102029190610c98565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe95ad486040518163ffffffff1660e01b8152600401602060405180830381865afa158015610273573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102979190610c98565b905081158015906102a85750428111155b80156103405750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631ad85cb56040518163ffffffff1660e01b8152600401602060405180830381865afa15801561031c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103409190610ccc565b61037f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037690610d24565b60405180910390fd5b600154604080517f63fe3b56000000000000000000000000000000000000000000000000000000008152905173ffffffffffffffffffffffffffffffffffffffff90921691632656227d9183916363fe3b56916004808201926000929091908290030181865afa1580156103f7573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820160405261043d9190810190610e7d565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166319eb4a906040518163ffffffff1660e01b8152600401600060405180830381865afa1580156104aa573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526104f09190810190610f2d565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663b36ea8646040518163ffffffff1660e01b8152600401600060405180830381865afa15801561055d573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682016040526105a391908101906110a3565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631a0925416040518163ffffffff1660e01b8152600401602060405180830381865afa158015610610573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106349190610c98565b6040518563ffffffff1660e01b815260040161065394939291906111fe565b6020604051808303816000875af1158015610672573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106969190610c98565b5050505050565b600060606000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663532c27b86040518163ffffffff1660e01b8152600401602060405180830381865afa158015610710573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107349190610c98565b90506000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663fe95ad486040518163ffffffff1660e01b8152600401602060405180830381865afa1580156107a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107c99190610c98565b905081158015906108665750600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16631ad85cb56040518163ffffffff1660e01b8152600401602060405180830381865afa158015610842573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108669190610ccc565b80156108725750428111155b935050509250929050565b610885610991565b61088f60006109e2565b565b610899610991565b60015473ffffffffffffffffffffffffffffffffffffffff16156108e9576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610376906112ac565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b610938610991565b73ffffffffffffffffffffffffffffffffffffffff8116610985576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037690611316565b61098e816109e2565b50565b60005473ffffffffffffffffffffffffffffffffffffffff16331461088f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161037690611358565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b805b82525050565b60608101610a6d8286610a57565b610a7a6020830185610a57565b610a876040830184610a57565b949350505050565b60008083601f840112610aa457610aa4600080fd5b50813567ffffffffffffffff811115610abf57610abf600080fd5b602083019150836001820283011115610ada57610ada600080fd5b9250929050565b60008060208385031215610af757610af7600080fd5b823567ffffffffffffffff811115610b1157610b11600080fd5b610b1d85828601610a8f565b92509250509250929050565b600073ffffffffffffffffffffffffffffffffffffffff82165b92915050565b6000610b4382610b29565b6000610b4382610b49565b610a5981610b54565b60208101610b438284610b5f565b801515610a59565b60005b83811015610b99578181015183820152602001610b81565b50506000910152565b6000610bac825190565b808452602084019350610bc3818560208601610b7e565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920192915050565b60408101610c008285610b76565b8181036020830152610a878184610ba2565b600073ffffffffffffffffffffffffffffffffffffffff8216610b43565b610a5981610c12565b60208101610b438284610c30565b610c5081610c12565b811461098e57600080fd5b8035610b4381610c47565b600060208284031215610c7b57610c7b600080fd5b6000610a878484610c5b565b80610c50565b8051610b4381610c87565b600060208284031215610cad57610cad600080fd5b6000610a878484610c8d565b801515610c50565b8051610b4381610cb9565b600060208284031215610ce157610ce1600080fd5b6000610a878484610cc1565b601b81526000602082017f457865637574696f6e206973206e6f7420726561647920796574210000000000815291505b5060200190565b60208082528101610b4381610ced565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f830116810181811067ffffffffffffffff82111715610da757610da7610d34565b6040525050565b6000610db960405190565b9050610dc58282610d63565b919050565b600067ffffffffffffffff821115610de457610de4610d34565b5060209081020190565b8051610b4381610c47565b6000610e0c610e0784610dca565b610dae565b83815290506020808201908402830185811115610e2b57610e2b600080fd5b835b81811015610e4f5780610e408882610dee565b84525060209283019201610e2d565b5050509392505050565b600082601f830112610e6d57610e6d600080fd5b8151610a87848260208601610df9565b600060208284031215610e9257610e92600080fd5b815167ffffffffffffffff811115610eac57610eac600080fd5b610a8784828501610e59565b6000610ec6610e0784610dca565b83815290506020808201908402830185811115610ee557610ee5600080fd5b835b81811015610e4f5780610efa8882610c8d565b84525060209283019201610ee7565b600082601f830112610f1d57610f1d600080fd5b8151610a87848260208601610eb8565b600060208284031215610f4257610f42600080fd5b815167ffffffffffffffff811115610f5c57610f5c600080fd5b610a8784828501610f09565b600067ffffffffffffffff821115610f8257610f82610d34565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011660200192915050565b6000610fbf610e0784610f68565b905082815260208101848484011115610fda57610fda600080fd5b610fe5848285610b7e565b509392505050565b600082601f83011261100157611001600080fd5b8151610a87848260208601610fb1565b600061101f610e0784610dca565b8381529050602080820190840283018581111561103e5761103e600080fd5b835b81811015610e4f57805167ffffffffffffffff81111561106257611062600080fd5b80860161106f8982610fed565b8552505060209283019201611040565b600082601f83011261109357611093600080fd5b8151610a87848260208601611011565b6000602082840312156110b8576110b8600080fd5b815167ffffffffffffffff8111156110d2576110d2600080fd5b610a878482850161107f565b60006110ea8383610c30565b505060200190565b60006110fc825190565b80845260209384019383018060005b8381101561113057815161111f88826110de565b97506020830192505060010161110b565b509495945050505050565b60006110ea8383610a57565b6000611151825190565b80845260209384019383018060005b83811015611130578151611174888261113b565b975060208301925050600101611160565b60006111918383610ba2565b9392505050565b60006111a2825190565b808452602084019350836020820285016111bc8560200190565b8060005b858110156111f157848403895281516111d98582611185565b94506020830160209a909a01999250506001016111c0565b5091979650505050505050565b6080808252810161120f81876110f2565b905081810360208301526112238186611147565b905081810360408301526112378185611198565b90506112466060830184610a57565b95945050505050565b602481526000602082017f476f7665726e616e636520636f6e74726163742068617320616c72656164792081527f7365742100000000000000000000000000000000000000000000000000000000602082015291505b5060400190565b60208082528101610b438161124f565b602681526000602082017f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206181527f6464726573730000000000000000000000000000000000000000000000000000602082015291506112a5565b60208082528101610b43816112bc565b60208082527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657291019081526000610d1d565b60208082528101610b438161132656fea2646970667358221220dad31d6aba11a9deff86bcc60716b21b0593e7f045d8ee01eee9c194568412e464736f6c63430008120033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 26,
        "contract": "contracts/Automation.sol:Automation",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 9436,
        "contract": "contracts/Automation.sol:Automation",
        "label": "governance",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IGovernance)10010"
      },
      {
        "astId": 9439,
        "contract": "contracts/Automation.sol:Automation",
        "label": "currentProposal",
        "offset": 0,
        "slot": "2",
        "type": "t_struct(CurrentProposal)9955_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_bytes_storage)dyn_storage": {
        "base": "t_bytes_storage",
        "encoding": "dynamic_array",
        "label": "bytes[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_contract(IGovernance)10010": {
        "encoding": "inplace",
        "label": "contract IGovernance",
        "numberOfBytes": "20"
      },
      "t_struct(CurrentProposal)9955_storage": {
        "encoding": "inplace",
        "label": "struct IGovernance.CurrentProposal",
        "members": [
          {
            "astId": 9941,
            "contract": "contracts/Automation.sol:Automation",
            "label": "proposalId",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 9943,
            "contract": "contracts/Automation.sol:Automation",
            "label": "executionTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 9946,
            "contract": "contracts/Automation.sol:Automation",
            "label": "targets",
            "offset": 0,
            "slot": "2",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 9949,
            "contract": "contracts/Automation.sol:Automation",
            "label": "values",
            "offset": 0,
            "slot": "3",
            "type": "t_array(t_uint256)dyn_storage"
          },
          {
            "astId": 9952,
            "contract": "contracts/Automation.sol:Automation",
            "label": "calldatas",
            "offset": 0,
            "slot": "4",
            "type": "t_array(t_bytes_storage)dyn_storage"
          },
          {
            "astId": 9954,
            "contract": "contracts/Automation.sol:Automation",
            "label": "description",
            "offset": 0,
            "slot": "5",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}